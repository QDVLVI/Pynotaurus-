
# ░░███╗░░██╗░░██╗██████╗░░░░░░░██████╗░
# ░████║░░██║░░██║╚════██╗░░░░░░╚════██╗
# ██╔██║░░███████║░░███╔═╝█████╗░░███╔═╝
# ╚═╝██║░░██╔══██║██╔══╝░░╚════╝██╔══╝░░
# ███████╗██║░░██║███████╗░░░░░░███████╗
# ╚══════╝╚═╝░░╚═╝╚══════╝░░░░░░╚══════╝

# ██████╗░██╗░░░██╗███╗░░██╗░█████╗░████████╗░█████╗░██╗░░░██╗██████╗░██╗░░░██╗░██████╗
# ██╔══██╗╚██╗░██╔╝████╗░██║██╔══██╗╚══██╔══╝██╔══██╗██║░░░██║██╔══██╗██║░░░██║██╔════╝
# ██████╔╝░╚████╔╝░██╔██╗██║██║░░██║░░░██║░░░███████║██║░░░██║██████╔╝██║░░░██║╚█████╗░
# ██╔═══╝░░░╚██╔╝░░██║╚████║██║░░██║░░░██║░░░██╔══██║██║░░░██║██╔══██╗██║░░░██║░╚═══██╗
# ██║░░░░░░░░██║░░░██║░╚███║╚█████╔╝░░░██║░░░██║░░██║╚██████╔╝██║░░██║╚██████╔╝██████╔╝
# ╚═╝░░░░░░░░╚═╝░░░╚═╝░░╚══╝░╚════╝░░░░╚═╝░░░╚═╝░░╚═╝░╚═════╝░╚═╝░░╚═╝░╚═════╝░╚═════╝░



####################################################################################################
####################################################################################################



# █▀▄▀█ █▀█ █▀▄ █░█ █░░ █▀▀ █▀
# █░▀░█ █▄█ █▄▀ █▄█ █▄▄ ██▄ ▄█


# All modules used for this game
import random, time, os, datetime
os.system("clear")

# Colorama module (only available for some terminal)
try:
  import colorama
  from colorama import Fore, Back, Style
  colorama.init(autoreset=True)
except: pass



####################################################################################################
####################################################################################################



# █▄▄ █▀█ ▄▀█ █▀█ █▀▄ █▀
# █▄█ █▄█ █▀█ █▀▄ █▄▀ ▄█


# Symbols:
#     ■ = Green wall
#     · = Empty space
#     O = Grey wall
#     M = Minotaur
#     ⁘ = Win
#     B = Player 1 / Blue
#     R = Player 2 / Red
#     Y = Player 3 / Yellow
#     W = Player 4 / White


# The board used for the game
board = [["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
          ["■","B2","B3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R1","R2","■"],
          ["■","B1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R3","■"],
          ["■","·","·","·","·","·","■","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","■","·","·","·","·","·","■"],
          ["■","·","·","O1","·","·","■","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","■","·","·","O2","·","·","■"],
          ["■","·","·","O1","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","O2","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","O3","O3","·","·","■","■","·","·","■","■","·","·","O4","O4","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","■","·","⁘","M","M","⁘","·","■","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","■","·","⁘","M","M","⁘","·","■","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","O5","O5","·","·","■","■","·","·","■","■","·","·","O6","O6","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","O7","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","O8","·","·","■"],
          ["■","·","·","O7","·","·","■","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","■","·","·","O8","·","·","■"],
          ["■","·","·","·","·","·","■","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","■","·","·","·","·","·","■"],
          ["■","W3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y1","■"],
          ["■","W2","W1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y3","Y2","■"],
          ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"]]


# All boards that can be played for custom gamemode:   [ [wall_number, board] , ... ]
custom_board = [
        # Board 1 (just a classic board)
        [8, # wall number
        [["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
          ["■","B2","B3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R1","R2","■"],
          ["■","B1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R3","■"],
          ["■","·","·","·","·","·","■","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","■","·","·","·","·","·","■"],
          ["■","·","·","O1","·","·","■","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","■","·","·","O2","·","·","■"],
          ["■","·","·","O1","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","O2","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","O3","O3","·","·","■","■","·","·","■","■","·","·","O4","O4","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","■","·","⁘","M","M","⁘","·","■","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","■","·","⁘","M","M","⁘","·","■","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","O5","O5","·","·","■","■","·","·","■","■","·","·","O6","O6","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","■","■","■","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","■","■","■","·","·","■"],
          ["■","·","·","·","·","·","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","O7","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","O8","·","·","■"],
          ["■","·","·","O7","·","·","■","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","■","·","·","O8","·","·","■"],
          ["■","·","·","·","·","·","■","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","■","·","·","·","·","·","■"],
          ["■","W3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y1","■"],
          ["■","W2","W1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y3","Y2","■"],
          ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"]]
        ],
        # Board 2
        [36, # wall number
        [["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
          ["■","B2","B3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R1","R2","■"],
          ["■","B1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R3","■"],
          ["■","·","·","■","■","O9","O9","O10","O10","■","■","O33","O33","■","■","·","·","■","■","O34","O34","■","■","O11","O11","O12","O12","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","O17","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O21","·","·","■"],
          ["■","·","·","O17","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O21","·","·","■"],
          ["■","·","·","O18","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O22","·","·","■"],
          ["■","·","·","O18","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O22","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","O1","O1","■","■","O25","O25","■","■","O2","O2","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","O27","·","·","·","·","·","O5","·","·","·","·","·","·","·","·","·","·","·","·","O7","·","·","·","·","·","O30","·","·","■"],
          ["■","·","·","O27","·","·","·","·","·","O5","·","·","·","·","·","·","·","·","·","·","·","·","O7","·","·","·","·","·","O30","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","·","·","·","·","·","·","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","·","⁘","⁘","⁘","⁘","·","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","O28","·","·","·","·","·","·","·","·","·","·","⁘","M","M","⁘","·","·","·","·","·","·","·","·","·","·","O31","·","·","■"],
          ["■","·","·","O28","·","·","·","·","·","·","·","·","·","·","⁘","M","M","⁘","·","·","·","·","·","·","·","·","·","·","O31","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","·","⁘","⁘","⁘","⁘","·","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","·","·","·","·","·","·","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","O29","·","·","·","·","·","O6","·","·","·","·","·","·","·","·","·","·","·","·","O8","·","·","·","·","·","O32","·","·","■"],
          ["■","·","·","O29","·","·","·","·","·","O6","·","·","·","·","·","·","·","·","·","·","·","·","O8","·","·","·","·","·","O32","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","O3","O3","■","■","O26","O26","■","■","O4","O4","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","O19","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O23","·","·","■"],
          ["■","·","·","O19","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O23","·","·","■"],
          ["■","·","·","O20","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O24","·","·","■"],
          ["■","·","·","O20","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O24","·","·","■"],
          ["■","·","·","■","■","·","·","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","O13","O13","O14","O14","■","■","O35","O35","■","■","·","·","■","■","O36","O36","■","■","O15","O15","O16","O16","■","■","·","·","■"],
          ["■","W3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y1","■"],
          ["■","W2","W1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y3","Y2","■"],
          ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"]]
        ],
        # Board 3
        [12, # wall number
        [["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
          ["■","B2","B3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R1","R2","■"],
          ["■","B1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R3","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","O9","O9","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","O5","O5","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","O1","O1","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","O8","·","·","·","·","·","·","·","·","·","·","O2","·","·","·","·","·","·","·","O10","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","O8","·","·","·","·","·","⁘","⁘","⁘","⁘","·","O2","·","·","·","·","·","·","·","O10","·","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","⁘","M","M","⁘","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","⁘","M","M","⁘","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","·","O12","·","·","·","·","·","·","·","O4","·","⁘","⁘","⁘","⁘","·","·","·","·","·","O6","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","O12","·","·","·","·","·","·","·","O4","·","·","·","·","·","·","·","·","·","·","O6","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","O3","O3","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","O7","O7","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","O11","O11","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■","■","·","·","■"],
          ["■","W3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y1","■"],
          ["■","W2","W1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y3","Y2","■"],
          ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"]]
        ],
        # Board 4
        [8, # wall number
        [["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
          ["■","B2","B3","·","·","·","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R1","R2","■"],
          ["■","B1","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R3","■"],
          ["■","·","·","·","■","·","·","·","·","·","·","■","·","·","■","■","·","·","■","■","■","·","·","■","·","·","■","·","·","·","·","■"],
          ["■","·","·","·","■","·","·","·","·","·","·","■","·","·","·","·","·","·","·","■","·","·","·","■","·","·","■","■","■","·","·","■"],
          ["■","·","·","■","■","·","·","■","■","O1","O1","■","·","·","·","·","·","·","·","■","·","·","·","■","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","■","·","·","■","■","·","·","·","·","·","·","·","·","·","·","■","·","·","·","·","■"],
          ["■","·","·","■","■","■","·","·","■","·","·","·","·","·","·","■","·","·","O6","·","·","■","■","■","·","·","■","·","·","■","■","■"],
          ["■","·","·","·","·","·","·","·","■","·","·","·","·","·","·","■","·","·","O6","·","·","·","·","·","·","·","O2","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","■","·","·","■","■","·","·","■","·","·","·","·","·","·","·","·","·","·","O2","·","·","·","·","■"],
          ["■","·","·","■","·","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","■","·","·","■","■","■","■","■","·","·","■"],
          ["■","·","·","■","■","■","·","·","·","·","·","·","■","·","·","■","■","·","·","■","■","■","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","·","·","·","·","O5","O5","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","·","·","■","·","·","·","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","■","·","⁘","M","M","⁘","·","■","■","■","■","■","■","·","·","·","■","·","·","■"],
          ["■","·","·","■","·","·","·","■","■","■","■","■","■","·","⁘","M","M","⁘","·","■","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","■","·","·","·","■","·","·","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","O7","O7","·","·","·","·","■","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","■","■","■","·","·","■","■","·","·","■","·","·","·","·","·","·","■","■","■","·","·","■"],
          ["■","·","·","■","■","■","■","■","·","·","■","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","·","■","·","·","■"],
          ["■","·","·","·","·","O4","·","·","·","·","·","·","·","·","·","·","■","·","·","■","■","·","·","■","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","O4","·","·","·","·","·","·","·","O8","·","·","■","·","·","·","·","·","·","■","·","·","·","·","·","·","·","■"],
          ["■","■","■","·","·","■","·","·","■","■","■","·","·","O8","·","·","■","·","·","·","·","·","·","■","·","·","■","■","■","·","·","■"],
          ["■","·","·","·","·","■","·","·","·","·","·","·","·","·","·","·","■","■","·","·","■","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","·","·","■"],
          ["■","·","·","·","·","·","·","·","■","·","·","·","■","·","·","·","·","·","·","·","■","O3","O3","■","■","·","·","■","■","·","·","■"],
          ["■","·","·","■","■","■","·","·","■","·","·","·","■","·","·","·","·","·","·","·","■","·","·","·","·","·","·","■","·","·","·","■"],
          ["■","·","·","·","·","■","·","·","■","·","·","■","■","■","·","·","■","■","·","·","■","·","·","·","·","·","·","■","·","·","·","■"],
          ["■","W3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","Y1","■"],
          ["■","W2","W1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","·","·","·","Y3","Y2","■"],
          ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"]]
        ]
        ]



####################################################################################################
####################################################################################################



# █░█ ▄▀█ █▀█ █ ▄▀█ █▄▄ █░░ █▀▀ █▀
# ▀▄▀ █▀█ █▀▄ █ █▀█ █▄█ █▄▄ ██▄ ▄█


# Player's name can be different from the start of the game
players_name = ["Blue", "Red", "Yellow", "White"]

# Player's ID during the game
players = ["Blue", "Red", "Yellow", "White"]

# 2-4 players in total (including bots)
player_num = 4

# If there're 3 Trues on a nested list, that player wins the game
players_character = [[False, False, False], [False, False, False], [False, False, False], [False, False, False]]

# 1-4 for Blue, Red, Yellow, and White
current_turn = 1

# The dice
dice = ["3","4","5","6","Wall","Minotaur"]

# Current total walls on the board
wall_count = 8

# Wall ID
wall_id = 8

# Minotaur's allowed moves
minotaur_move = 8

# If the Minotaur is on the center
minotaur_at_start = True

# Bot's ID
bot_id = "g278of@EBU$(@dbAIUBd(*@Uioun@*EB"

# Classic/Custom gamemode
gamemode_chosen = "Classic"

# SLOW/MEDIUM/FAST game speed
gamespeed_chosen = "SLOW"



####################################################################################################
####################################################################################################




# █▀▄▀█ ▄▀█ █ █▄░█   █▀▀ █▀█ █▀▄ █▀▀
# █░▀░█ █▀█ █ █░▀█   █▄▄ █▄█ █▄▀ ██▄


# This while loop including try except is to prevent any code errors

exit_game = False
encountered_error = False

while True:
  try:



    ####################################################################################################



    # ▀█▀ ▄▀█ █▄▀ █▀▀   █ █▄░█ █▀█ █░█ ▀█▀
    # ░█░ █▀█ █░█ ██▄   █ █░▀█ █▀▀ █▄█ ░█░

    # Read the user input to check if it wants to go back to the home screen
    
    
    def take_input(text):
      
      user_answer = input(text)

      if user_answer.upper() == "!HOME":

        print("The current progress will be erased. Are you sure you want to go back to the home page?")
        answer = input("Type 'YES' or 'Y' to confirm or else to cancel: ")
        
        # If the input is "YES"
        if answer.upper() == "YES" or answer.upper() == "Y":
          
          # Loading screen to home page
          for i in range(100):
            print("\n\n\n\n\n\n\n\n\n\n")
            time.sleep(0.001)
          time.sleep(1)
          for i in range(100):
            print("Loading:", i+1, "%", end = "\r")
            time.sleep(0.01) 
          for i in range(100):
            print("\n\n\n\n\n\n\n\n\n\n")
            time.sleep(0.001)
          time.sleep(1)

          # Goes back to home page
          Main()
        
        # If the input is "NO"
        print("Continuing the game...")
        time.sleep(1.5)

      # Returns the value that the user inputs before
      return user_answer



    ####################################################################################################



    # █▀ █░█ █▀█ █░█░█   █▄▄ █▀█ ▄▀█ █▀█ █▀▄
    # ▄█ █▀█ █▄█ ▀▄▀▄▀   █▄█ █▄█ █▀█ █▀▄ █▄▀

    # Each mode is for highlighting the characters
    # (ex. it's blue's turn, then B B B becomes 1 2 3)
    # (character variable won't be used)


    def show_board(mode=None,character=None):

      print("====================================================================================================\n")

      # If the terminal supports colorama
      try:
      
        # Board, default
        if mode == None:
          for i in board:
            list_to_print = []
            for j in i:
              if j in "B1B2B3": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}B")
              elif j in "R1R2R3": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}R")
              elif j in "Y1Y2Y3": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}Y")
              elif j in "W1W2W3": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}W")
              elif j == "·": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "■": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "⁘": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "M": list_to_print.append(f"{Style.BRIGHT}{Fore.MAGENTA}M")
              elif j[0] == "O": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}{j[0]}")
              else: list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
            print(" ".join(list_to_print))
        
        # Board, highlights blue player
        elif mode == "Blue":
          for i in board:
            list_to_print = []
            for j in i:
              if j in "B1B2B3":
                if j == "B1": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}1")
                elif j == "B2": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}2")
                elif j == "B3": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}3")
              elif j in "R1R2R3": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}R")
              elif j in "Y1Y2Y3": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}Y")
              elif j in "W1W2W3": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}W")
              elif j == "·": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "■": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "⁘": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "M": list_to_print.append(f"{Style.BRIGHT}{Fore.MAGENTA}M")
              elif j[0] == "O": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}{j[0]}")
              else: list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
            print(" ".join(list_to_print))

        # Board, highlights red player
        elif mode == "Red":
          for i in board:
            list_to_print = []
            for j in i:
              if j in "B1B2B3": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}B")
              elif j in "R1R2R3":
                if j == "R1": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}1")
                elif j == "R2": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}2")
                elif j == "R3": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}3")
              elif j in "Y1Y2Y3": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}Y")
              elif j in "W1W2W3": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}W")
              elif j == "·": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "■": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "⁘": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "M": list_to_print.append(f"{Style.BRIGHT}{Fore.MAGENTA}M")
              elif j[0] == "O": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}{j[0]}")
              else: list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
            print(" ".join(list_to_print))

        # Board, highlights yellow player
        elif mode == "Yellow":
          for i in board:
            list_to_print = []
            for j in i:
              if j in "B1B2B3": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}B")
              elif j in "R1R2R3": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}R")
              elif j in "Y1Y2Y3":
                if j == "Y1": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}1")
                elif j == "Y2": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}2")
                elif j == "Y3": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}3")
              elif j in "W1W2W3": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}W")
              elif j == "·": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "■": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "⁘": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "M": list_to_print.append(f"{Style.BRIGHT}{Fore.MAGENTA}M")
              elif j[0] == "O": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}{j[0]}")
              else: list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
            print(" ".join(list_to_print))
            
        # Board, highlights white player
        elif mode == "White":
          for i in board:
            list_to_print = []
            for j in i:
              if j in "B1B2B3": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}B")
              elif j in "R1R2R3": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}R")
              elif j in "Y1Y2Y3": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}Y")
              elif j in "W1W2W3":
                if j == "W1": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}1")
                elif j == "W2": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}2")
                elif j == "W3": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}3")
              elif j == "·": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "■": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "⁘": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "M": list_to_print.append(f"{Style.BRIGHT}{Fore.MAGENTA}M")
              elif j[0] == "O": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}{j[0]}")
              else: list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
            print(" ".join(list_to_print))
            
        # Board, highlights grey wall
        elif mode == "Wall":
          c = 1
          print("0                 1                   2                   3")
          print("1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2")
          for i in board:
            list_to_print = []
            for j in i:
              if j in "B1B2B3": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}B")
              elif j in "R1R2R3": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}R")
              elif j in "Y1Y2Y3": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}Y")
              elif j in "W1W2W3": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}W")
              elif j == "·": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "■": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "⁘": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              elif j == "M": list_to_print.append(f"{Style.BRIGHT}{Fore.MAGENTA}M")
              elif j[0] == "O": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}{j[0]}")
              else: list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
            list_to_print.append(str(c))
            print(" ".join(list_to_print))
            c += 1
            
        # Board, highlights minotaur
        elif mode == "Minotaur":

          # If the minotaur is on the center of the map
          if minotaur_at_start:

            # make new board to show available places to put minotaur
            board_copy = board[:]

            # Locations:
            #   13 - 14,15,16,17
            #   14 - 13,18
            #   15 - 13,18
            #   16 - 13,18
            #   17 - 13,18
            #   18 - 14,15,16,17

            if board_copy[13][14] == "·": board_copy[13][14] = "A"
            if board_copy[13][15] == "·": board_copy[13][15] = "B"
            if board_copy[13][16] == "·": board_copy[13][16] = "C"
            if board_copy[13][17] == "·": board_copy[13][17] = "D"
            if board_copy[14][13] == "·": board_copy[14][13] = "E"
            if board_copy[14][18] == "·": board_copy[14][18] = "F"
            if board_copy[15][13] == "·": board_copy[15][13] = "G"
            if board_copy[15][18] == "·": board_copy[15][18] = "H"
            if board_copy[16][13] == "·": board_copy[16][13] = "I"
            if board_copy[16][18] == "·": board_copy[16][18] = "J"
            if board_copy[17][13] == "·": board_copy[17][13] = "K"
            if board_copy[17][18] == "·": board_copy[17][18] = "L"
            if board_copy[18][14] == "·": board_copy[18][14] = "M"
            if board_copy[18][15] == "·": board_copy[18][15] = "N"
            if board_copy[18][16] == "·": board_copy[18][16] = "O"
            if board_copy[18][17] == "·": board_copy[18][17] = "P"

            # Then print the board
            for i in board_copy:
              list_to_print = []
              for j in i:
                if j in "ABCDEFGHIJKLMNOP": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
                elif j in "B1B2B3": list_to_print.append(f"{Style.BRIGHT}{Fore.BLUE}B")
                elif j in "R1R2R3": list_to_print.append(f"{Style.BRIGHT}{Fore.RED}R")
                elif j in "Y1Y2Y3": list_to_print.append(f"{Style.BRIGHT}{Fore.YELLOW}Y")
                elif j in "W1W2W3": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}W")
                elif j == "·": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
                elif j == "■": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
                elif j == "⁘": list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
                elif j[0] == "O": list_to_print.append(f"{Style.BRIGHT}{Fore.WHITE}{j[0]}")
                else: list_to_print.append(f"{Style.BRIGHT}{Fore.GREEN}{j}")
              print(" ".join(list_to_print))
           
            # Set the map back to normal view to avoid errors
            if board_copy[13][14] == "A": board_copy[13][14] = "·"
            if board_copy[13][15] == "B": board_copy[13][15] = "·"
            if board_copy[13][16] == "C": board_copy[13][16] = "·"
            if board_copy[13][17] == "D": board_copy[13][17] = "·"
            if board_copy[14][13] == "E": board_copy[14][13] = "·"
            if board_copy[14][18] == "F": board_copy[14][18] = "·"
            if board_copy[15][13] == "G": board_copy[15][13] = "·"
            if board_copy[15][18] == "H": board_copy[15][18] = "·"
            if board_copy[16][13] == "I": board_copy[16][13] = "·"
            if board_copy[16][18] == "J": board_copy[16][18] = "·"
            if board_copy[17][13] == "K": board_copy[17][13] = "·"
            if board_copy[17][18] == "L": board_copy[17][18] = "·"
            if board_copy[18][14] == "M": board_copy[18][14] = "·"
            if board_copy[18][15] == "N": board_copy[18][15] = "·"
            if board_copy[18][16] == "O": board_copy[18][16] = "·"
            if board_copy[18][17] == "P": board_copy[18][17] = "·"
      

      # If colorama is unsupported in the terminal
      except:
        
        # Board, default
        if mode == None:
          for i in board:
            for j in i:
              if j in "B1B2B3": print("B",end=" ")
              elif j in "R1R2R3": print("R",end=" ")
              elif j in "Y1Y2Y3": print("Y",end=" ")
              elif j in "W1W2W3": print("W",end=" ")
              elif j == "·": print(j,end=" ")
              elif j == "■": print(j,end=" ")
              elif j == "V": print(j,end=" ")
              elif j == "M": print(j,end=" ")
              elif j[0] == "O": print(j[0],end=" ")
              else: print(j,end=" ")
            print()

        # Board, highlights blue player
        elif mode == "Blue":
          for i in board:
            for j in i:
              if j in "B1B2B3":
                if j == "B1": print("1",end=" ")
                elif j == "B2": print("2",end=" ")
                elif j == "B3": print("3",end=" ")
              elif j in "R1R2R3": print("R",end=" ")
              elif j in "Y1Y2Y3": print("Y",end=" ")
              elif j in "W1W2W3": print("W",end=" ")
              elif j == "·": print(j,end=" ")
              elif j == "■": print(j,end=" ")
              elif j == "V": print(j,end=" ")
              elif j == "M": print(j,end=" ")
              elif j[0] == "O": print(j[0],end=" ")
              else: print(j,end=" ")
            print()
            
        # Board, highlights red player
        elif mode == "Red":
          for i in board:
            for j in i:
              if j in "B1B2B3": print("B",end=" ")
              elif j in "R1R2R3":
                if j == "R1": print("1",end=" ")
                elif j == "R2": print("2",end=" ")
                elif j == "R3": print("3",end=" ")
              elif j in "Y1Y2Y3": print("Y",end=" ")
              elif j in "W1W2W3": print("W",end=" ")
              elif j == "·": print(j,end=" ")
              elif j == "■": print(j,end=" ")
              elif j == "V": print(j,end=" ")
              elif j == "M": print(j,end=" ")
              elif j[0] == "O": print(j[0],end=" ")
              else: print(j,end=" ")
            print()
            
        # Board, highlights yellow player
        elif mode == "Yellow":
          for i in board:
            for j in i:
              if j in "B1B2B3": print("B",end=" ")
              elif j in "R1R2R3": print("R",end=" ")
              elif j in "Y1Y2Y3":
                if j == "Y1": print("1",end=" ")
                elif j == "Y2": print("2",end=" ")
                elif j == "Y3": print("3",end=" ")
              elif j in "W1W2W3": print("W",end=" ")
              elif j == "·": print(j,end=" ")
              elif j == "■": print(j,end=" ")
              elif j == "V": print(j,end=" ")
              elif j == "M": print(j,end=" ")
              elif j[0] == "O": print(j[0],end=" ")
              else: print(j,end=" ")
            print()
            
        # Board, highlights white player
        elif mode == "White":
          for i in board:
            for j in i:
              if j in "B1B2B3": print("B",end=" ")
              elif j in "R1R2R3": print("R",end=" ")
              elif j in "Y1Y2Y3": print("Y",end=" ")
              elif j in "W1W2W3":
                if j == "W1": print("1",end=" ")
                elif j == "W2": print("2",end=" ")
                elif j == "W3": print("3",end=" ")
              elif j == "·": print(j,end=" ")
              elif j == "■": print(j,end=" ")
              elif j == "V": print(j,end=" ")
              elif j == "M": print(j,end=" ")
              elif j[0] == "O": print(j[0],end=" ")
              else: print(j,end=" ")
            print()
            
        # Board, highlights grey wall
        elif mode == "Wall":
          c = 1
          for i in board:
            for j in i:
              if j in "B1B2B3": print("B",end=" ")
              elif j in "R1R2R3": print("R",end=" ")
              elif j in "Y1Y2Y3": print("Y",end=" ")
              elif j in "W1W2W3": print("W",end=" ")
              elif j == "·": print(j,end=" ")
              elif j == "■": print(j,end=" ")
              elif j == "V": print(j,end=" ")
              elif j == "M": print(j,end=" ")
              elif j[0] == "O": print(j[0],end=" ")
              else: print(j,end=" ")
            print(c)
            c += 1
            
        # Board, highlights minotaur
        elif mode == "Minotaur":
          
          # If the minotaur is on the center of the map
          if minotaur_at_start:
            
            # Make new board to show available places to put minotaur
            board_copy = board[:]

            # Locations:
            #   13 - 14,15,16,17
            #   14 - 13,18
            #   15 - 13,18
            #   16 - 13,18
            #   17 - 13,18
            #   18 - 14,15,16,17

            if board_copy[13][14] == "·": board_copy[13][14] = "A"
            if board_copy[13][15] == "·": board_copy[13][15] = "B"
            if board_copy[13][16] == "·": board_copy[13][16] = "C"
            if board_copy[13][17] == "·": board_copy[13][17] = "D"
            if board_copy[14][13] == "·": board_copy[14][13] = "E"
            if board_copy[14][18] == "·": board_copy[14][18] = "F"
            if board_copy[15][13] == "·": board_copy[15][13] = "G"
            if board_copy[15][18] == "·": board_copy[15][18] = "H"
            if board_copy[16][13] == "·": board_copy[16][13] = "I"
            if board_copy[16][18] == "·": board_copy[16][18] = "J"
            if board_copy[17][13] == "·": board_copy[17][13] = "K"
            if board_copy[17][18] == "·": board_copy[17][18] = "L"
            if board_copy[18][14] == "·": board_copy[18][14] = "M"
            if board_copy[18][15] == "·": board_copy[18][15] = "N"
            if board_copy[18][16] == "·": board_copy[18][16] = "O"
            if board_copy[18][17] == "·": board_copy[18][17] = "P"
            
            # Then print the board
            for i in board_copy:
              for j in i:
                if j in "ABCDEFGHIJKLMNOP": print(j,end=" ")
                elif j in "B1B2B3": print("B",end=" ")
                elif j in "R1R2R3": print("R",end=" ")
                elif j in "Y1Y2Y3": print("Y",end=" ")
                elif j in "W1W2W3": print("W",end=" ")
                elif j == "·": print(j,end=" ")
                elif j == "■": print(j,end=" ")
                elif j == "V": print(j,end=" ")
                elif j[0] == "O": print(j[0],end=" ")
                else: print(j,end=" ")
              print()
           
            # Set the map back to normal view to avoid errors
            if board_copy[13][14] == "A": board_copy[13][14] = "·"
            if board_copy[13][15] == "B": board_copy[13][15] = "·"
            if board_copy[13][16] == "C": board_copy[13][16] = "·"
            if board_copy[13][17] == "D": board_copy[13][17] = "·"
            if board_copy[14][13] == "E": board_copy[14][13] = "·"
            if board_copy[14][18] == "F": board_copy[14][18] = "·"
            if board_copy[15][13] == "G": board_copy[15][13] = "·"
            if board_copy[15][18] == "H": board_copy[15][18] = "·"
            if board_copy[16][13] == "I": board_copy[16][13] = "·"
            if board_copy[16][18] == "J": board_copy[16][18] = "·"
            if board_copy[17][13] == "K": board_copy[17][13] = "·"
            if board_copy[17][18] == "L": board_copy[17][18] = "·"
            if board_copy[18][14] == "M": board_copy[18][14] = "·"
            if board_copy[18][15] == "N": board_copy[18][15] = "·"
            if board_copy[18][16] == "O": board_copy[18][16] = "·"
            if board_copy[18][17] == "P": board_copy[18][17] = "·"
      
      print("\n====================================================================================================")



    ####################################################################################################



    # █░█░█ ▄▀█ █░░ █░░ █▀
    # ▀▄▀▄▀ █▀█ █▄▄ █▄▄ ▄█



    # Remove wall - Horizontal
    def remove_grey_walls_hor():

      global wall_count, wall_id

      while True:
        
        try:
          l = int(take_input('Which line of grey walls do you want to remove? (from top to bottom, first line being 1; 1-32): '))
        except ValueError:
          print('Please insert a single integer only!')
          time.sleep(1.5)

        else:
          
          try:
            # hor_loc stands for horizontal location i.e. the location of the thing on that line
            hor_loc = take_input('The location of the grey walls you want to remove (from left to right, left being 1; remove 2 consecutive numbers; 1-32): ').split()
            num1, num2 = hor_loc
          except ValueError:
            print('Please insert only 2 integer!')
            time.sleep(1.5)
          
          else:

            # hor_loc = [a, b] -> num1 , num2 = a, b which num1 = a
            num1, num2 = hor_loc

            # more convenient for players to read line starting from 1 but still have to -1 for list
            l = l-1
            num1 = int(num1) - 1  #same reason mentioned
            num2 = int(num2) - 1

            # ensure the num are in range(typing > 5 resulting error cuz the board here is too small)
            if (0 <= num1 <= 31 and 0 <= num2 <= 31 and 0 <= l <= 31) is False:
              print('The numbers you input was either too large or too small, please insert again!')
              time.sleep(1.5)
              continue

            #vensure the number are consecutive
            elif (num2-num1 != 1 and num2>num1) or (num1 - num2 != 1 and num1>num2):
              print('The locations are not consecutive, please insert again!')
              time.sleep(1.5)
              continue
            
            # ensure they choose grey walls instead of empty space or other
            elif board[l][num1][0] != "O" or board[l][num2][0] != "O":
              print('The location you selected is not grey wall, please insert again!')
              time.sleep(1.5)
              continue

            # ensure they choose one specific grey walls instead of two
            elif board[l][num1] != board[l][num2]:
              print('The 2 selected locations cannot be 2 different grey walls, please insert again!')
              time.sleep(1.5)
              continue

            else:
              board[l] = board[l][:num1]+['·']+board[l][num1+1:]
              board[l] = board[l][:num2]+['·']+board[l][num2+1:]
              wall_count -= 1
              break

      return board


    # Remove wall - Vertical
    def remove_grey_walls_ver():
      
      global wall_count, wall_id
      
      while True:
        
        try:
          l = take_input('Which consecutive lines of grey walls do you want to remove? (from top to bottom, first line being 1; insert 2 consecutive number; 1-32): ').split()
          num1, num2 = l
        except ValueError:
          print('Please insert only 2 integers!')
          time.sleep(1.5)
        
        else:
          
          # ver_loc stands for vertical location
          try:
            ver_loc = int(take_input('The location of the grey walls you want to remove (from left to right, left being 1; 1-32): '))
          except ValueError:
            print('Please insert only 1 integer!')
            time.sleep(1.5)
          
          else:

            # l = [a, b] -> num1 , num2 = a, b which num1 = a
            num1, num2 = l

            # more convenient for players to read line starting from 1 but still have to -1 for list
            ver_loc = ver_loc-1
            num1 = int(num1) - 1
            num2 = int(num2) - 1

            # ensure the num are in range(typing > 5 resulting error cuz the board here is too small)
            if  (0 <= num1 <= 31 and 0 <= num2 <= 31 and 0 <= ver_loc <= 31) is False:
              print('The numbers you input was either too large or too small, please insert again!')
              time.sleep(1.5)
              continue
            
            # ensure the number are consecutive
            elif (num2-num1 != 1 and num2>num1) or (num1 - num2 != 1 and num1>num2):
              print('The locations are not consecutive, please insert again!')
              time.sleep(1.5)
              continue

            # ensure they choose grey walls instead of empty space or other
            elif board[num1][ver_loc][0] != "O" or board[num2][ver_loc][0] != "O":
              print('The location you selected is not grey wall, please insert again!')
              time.sleep(1.5)
              continue

            # ensure they choose one specific grey walls instead of two
            elif board[l][num1] != board[l][num2]:
              print('The 2 selected locations cannot be 2 different grey walls, please insert again!')
              time.sleep(1.5)
              continue
            
            else:
              board[num1] = board[num1][:ver_loc]+['·']+board[num1][ver_loc+1:]
              board[num2] = board[num2][:ver_loc]+['·']+board[num2][ver_loc+1:]
              wall_count -= 1
              break

      return board


    # Place wall - Horizontal
    def place_grey_walls_hor():

      global wall_count, wall_id
      
      while True:
        
        try:
          l = int(take_input('Which line do you want to place the grey walls? (from top to bottom, first line being 1): '))
        except ValueError:
          print('Please insert a single integer only!')
          time.sleep(1.5)
        
        else:
          
          try:
            hor_loc = take_input('The location of the grey walls you want to place (from left to right, left being 1; insert 2 consecutive numbers): ').split()
            num1, num2 = hor_loc
          except ValueError:
            print('Please insert only 2 integer!')
            time.sleep(1.5)
          
          else:
            
            num1, num2 = hor_loc
            
            l = l-1
            num1 = int(num1) - 1
            num2 = int(num2) - 1
            
            # ensure the num are in range(typing > 5 resulting error cuz the board here is too small)
            if  (0 <= num1 <= 31 and 0 <= num2 <= 31 and 0 <= l <= 31) is False:
              print('The numbers you input was either too large or too small, please insert again!')
              time.sleep(1.5)
              continue
            if ((num1==1 and num2 == 2) or (num1==2 and num2 == 1) or (num1 == 30 and num2 == 29) or (num1 == 29 and num2 ==30)) and ((l == 1 or l == 2) or (l==30 or l == 29)):
              print('The number you input will block the troop base, please insert again!')
              time.sleep(1.5)
              continue
            # ensure the number are consecutive
            elif (num2-num1 != 1 and num2>num1) or (num1 - num2 != 1 and num1>num2):
              print('The locations are not consecutive, please insert again!')
              time.sleep(1.5)
              continue

            # ensure they choose empty space instead of other
            elif board[l][num1] != "·" or board[l][num2] != "·":
              print('The location you selected is not an empty space, please insert again!')
              time.sleep(1.5)
              continue

            else:
              board[l] = board[l][:num1]+['O'+str(wall_id+1)]+board[l][num1+1:]
              board[l] = board[l][:num2]+['O'+str(wall_id+1)]+board[l][num2+1:]
              wall_count += 1
              wall_id += 1
              break

      return board


    # Place wall - Vertical
    def place_grey_walls_ver():

      global wall_count, wall_id

      while True:
        
        try:
          l = take_input('Which consecutive lines you want to place the grey walls? (from top to bottom, first line being 1; insert 2 consecutive number; 1-32): ').split()
          num1, num2 = l   
        except ValueError:
          print('Please insert only 2 integers!')
          time.sleep(1.5)
        
        else:

          # ver_loc stands for vertical location
          try:
            ver_loc = int(take_input('The location of the grey walls you want to place (from left to right, left being 1; 1-32): '))
          except ValueError:
            print('Please insert only 1 integers!')
            time.sleep(1.5)

          else:

            # l = [a, b] -> num1 , num2 = a, b which num1 = a
            num1, num2 = l

            # more convenient for players to read line starting from 1 but still have to -1 for list
            ver_loc = ver_loc-1
            num1 = int(num1) - 1
            num2 = int(num2) - 1

            # ensure the num are in range(typing > 5 resulting error cuz the board here is too small)
            if (0 <= num1 <= 31 and 0 <= num2 <= 31 and 0 <= ver_loc <= 31) is False:
              print('The numbers you input was either too large or too small, please insert again!')
              time.sleep(1.5)
              continue
            if ((num1 == 1 and num2 ==2) or (num1 == 2 and num2 == 1) or (num1 == 30 and num2 == 29) or (num2 ==30 and num1==29)) and ((ver_loc == 1) or (ver_loc == 2) or (ver_loc == 30) or (ver_loc == 29)):
              print('The number you input will block the troop base, please insert again!')
              time.sleep(1.5)
              continue
            # ensure the number are consecutive
            elif (num2-num1 != 1 and num2>num1) or (num1 - num2 != 1 and num1>num2):
              print('The locations are not consecutive, please insert again!')
              time.sleep(1.5)
              continue

            # ensure they choose grey walls instead of empty space or other
            elif board[num1][ver_loc] != "·" or board[num2][ver_loc] != "·":
              print('The location you selected is not an empty space, please insert again!')
              time.sleep(1.5)
              continue
            
            else:
              board[num1] = board[num1][:ver_loc]+['O'+str(wall_id+1)]+board[num1][ver_loc+1:]
              board[num2] = board[num2][:ver_loc]+['O'+str(wall_id+1)]+board[num2][ver_loc+1:]
              wall_count += 1
              wall_id += 1
              break

      return board


    # Remove wall - Base code
    def grey_walls_remove():
      while True:
          try:
            q1 = int(take_input('How would you like to remove the grey walls? \n 1. Horizontal \n 2. Vertical \nChoice: '))
          except ValueError:
            print('Invalid input!')
            time.sleep(1.5)
          else:
            if q1 == 1:
              remove_grey_walls_hor()
              break
            elif q1 == 2:
              remove_grey_walls_ver()
              break
            else: print('Input undefined, please insert again')


    # Place wall - Base code
    def grey_walls_place():
      while True:
          try:
            q2 = int(take_input('How would you like to place the grey walls? \n 1. Horizontal \n 2. Vertical \nChoice: '))
          except ValueError:
            print('Invalid input!')
            time.sleep(1.5)
          else:
            if q2 == 1:
              place_grey_walls_hor()
              break
            elif q2 == 2:
              place_grey_walls_ver()
              break
            else:
              print('Invalid input!')
              time.sleep(1.5)
      


    ####################################################################################################



    # █▀▄▀█ █ █▄░█ █▀█ ▀█▀ ▄▀█ █░█ █▀█   ▄▀█ █▄░█ █▀▄   █▀█ █░░ ▄▀█ █▄█ █▀▀ █▀█   █▀█ █▀▀ ▀█▀ █░█ █▀█ █▄░█
    # █░▀░█ █ █░▀█ █▄█ ░█░ █▀█ █▄█ █▀▄   █▀█ █░▀█ █▄▀   █▀▀ █▄▄ █▀█ ░█░ ██▄ █▀▄   █▀▄ ██▄ ░█░ █▄█ █▀▄ █░▀█

    # When minotaur touches a player, both of them goes back to their own starting point
    
    
    def MinoPlayerReturn(check):
      
      global board
      
      # Minotaur return
      board[15][15] = board[15][16] = board[16][15] = board[16][16] = "M"
      
      # Player return
      if check[0] == "B":
        if board[2][1] == "·": board[2][1] = check
        elif board[1][1] == "·": board[1][1] = check
        else: board[1][2] = check
      elif check[0] == "R":
        if board[1][29] == "·": board[1][29] = check
        elif board[1][30] == "·": board[1][30] = check
        else: board[2][30] = check
      elif check[0] == "Y":
        if board[30][29] == "·": board[30][29] = check
        elif board[30][30] == "·": board[30][30] = check
        else: board[29][30] = check
      elif check[0] == "W":
        if board[30][2] == "·": board[30][2] = check
        elif board[30][1] == "·": board[30][1] = check
        else: board[29][1] = check



    ####################################################################################################



    # █▀▀ █░█ ▄▀█ █▀█ ▄▀█ █▀▀ ▀█▀ █▀▀ █▀█   █▀▀ █ █▄░█ █ █▀ █░█
    # █▄▄ █▀█ █▀█ █▀▄ █▀█ █▄▄ ░█░ ██▄ █▀▄   █▀░ █ █░▀█ █ ▄█ █▀█

    
    def CharacterFinish(current_turn,character_location,character):
      
      global board, players_character
      
      # Scoring
      # (current_turn-1 for changing from 1-4 to index 0-3)
      board[character_location[0]][character_location[1]] = "·"
      if character in "B1B2B3": players_character[current_turn-1][int(character[1])-1] = True
      elif character in "R1R2R3": players_character[current_turn-1][int(character[1])-1] = True
      elif character in "Y1Y2Y3": players_character[current_turn-1][int(character[1])-1] = True
      elif character in "W1W2W3": players_character[current_turn-1][int(character[1])-1] = True



    ####################################################################################################
    
    

    # █▀▄▀█ █ █▄░█ █▀█ ▀█▀ ▄▀█ █░█ █▀█   █▀▄▀█ █▀█ █░█ █▀▀ █▀   █▀▀ █▀█ █▀█ █▀▄▀█   █▀ ▀█▀ ▄▀█ █▀█ ▀█▀
    # █░▀░█ █ █░▀█ █▄█ ░█░ █▀█ █▄█ █▀▄   █░▀░█ █▄█ ▀▄▀ ██▄ ▄█   █▀░ █▀▄ █▄█ █░▀░█   ▄█ ░█░ █▀█ █▀▄ ░█░


    def MinoMoveFromStart(place_minotaur):
      
      global board

      # Locations:
      #   13 - 14,15,16,17
      #   14 - 13,18
      #   15 - 13,18
      #   16 - 13,18
      #   17 - 13,18
      #   18 - 14,15,16,17

      if place_minotaur.upper() == "A": board[13][14] = "M"
      if place_minotaur.upper() == "B": board[13][15] = "M"
      if place_minotaur.upper() == "C": board[13][16] = "M"
      if place_minotaur.upper() == "D": board[13][17] = "M"
      if place_minotaur.upper() == "E": board[14][13] = "M"
      if place_minotaur.upper() == "F": board[14][18] = "M"
      if place_minotaur.upper() == "G": board[15][13] = "M"
      if place_minotaur.upper() == "H": board[15][18] = "M"
      if place_minotaur.upper() == "I": board[16][13] = "M"
      if place_minotaur.upper() == "J": board[16][18] = "M"
      if place_minotaur.upper() == "K": board[17][13] = "M"
      if place_minotaur.upper() == "L": board[17][18] = "M"
      if place_minotaur.upper() == "M": board[18][14] = "M"
      if place_minotaur.upper() == "N": board[18][15] = "M"
      if place_minotaur.upper() == "O": board[18][16] = "M"
      if place_minotaur.upper() == "P": board[18][17] = "M"

      board[15][15] = board[15][16] = board[16][15] = board[16][16] = "■"



    ####################################################################################################
    


    # █▄▄ █▀█ ▀█▀   █▀█ █░░ ▄▀█ █▄█ █▀▀ █▀█   ▄▄   █▀█ ▄▀█ ▀█▀ █░█
    # █▄█ █▄█ ░█░   █▀▀ █▄▄ █▀█ ░█░ ██▄ █▀▄   ░░   █▀▀ █▀█ ░█░ █▀█
    
    # Bot player finds its path


    def find_path(start, end):
        
        find_path = [[start]]
        checked_path = [start]

        # Loops from the starting point to the target
        while find_path != []:

            current_path = find_path.pop(0)
            current_location = current_path[-1]

            x, y = current_location

            # Reaches the target
            if current_location == end: return current_path

            # Find possible moves
            for next_location in [[x, y-1], [x-1, y], [x, y+1], [x+1, y]]:

                next_x, next_y = next_location

                if next_x < 0 or next_x >= len(board) or next_y < 0 or next_y >= len(board[0]): continue
                if next_location in checked_path: continue
                if board[next_y][next_x] != '·': continue

                # Creates a path
                find_path.append(current_path + [next_location])
                checked_path += [next_location]



    ####################################################################################################


    
    # █▄▄ █▀█ ▀█▀   █▀█ █░░ ▄▀█ █▄█ █▀▀ █▀█   ▄▄   █▀▄▀█ █▀█ █░█ █▀▀
    # █▄█ █▄█ ░█░   █▀▀ █▄▄ █▀█ ░█░ ██▄ █▀▄   ░░   █░▀░█ █▄█ ▀▄▀ ██▄

    # When bot player rolls a number


    def bot_move(current_position):
        
        # All positions that's next to the win position
        end_position = [[18,17],[18,16],[18,15],[18,14],[17,13],[16,13],[15,13],[14,13],[13,14],[13,15],[13,16],[13,17],[14,18],[15,18],[16,18],[17,18]]
        
        # Find a path
        path = []
        for i in end_position:
            one_path = find_path(current_position, i)
            if one_path != None: path.append(one_path) 

        # Creates the path
        if path != []:
            path_length = len(path[0])
            path_pick = [0]
            for i in range(1,len(path)):
                if path_length > len(path[i]):
                    path_length = len(path[i])
                    path_pick.append(i)
            for c in path[path_pick[-1]][1:]:
                x, y = c
                board[y][x] = '+'
        
        # Find the next position to move or PASS
        move = "PASS"
        current_location = [current_position[1],current_position[0]]
        if (board[current_location[0]][current_location[1]+1] == "⁘") or (board[current_location[0]][current_location[1]+1] == "+"): move = "D"
        elif (board[current_location[0]][current_location[1]-1] == "⁘") or (board[current_location[0]][current_location[1]-1] == "+"): move = "A"
        elif (board[current_location[0]+1][current_location[1]] == "⁘") or (board[current_location[0]+1][current_location[1]] == "+"): move = "S"
        elif (board[current_location[0]-1][current_location[1]] == "⁘") or (board[current_location[0]-1][current_location[1]] == "+"): move = "W"
        else: move = "PASS"
        
        # Removes the path on board
        for i in range(len(board)):
            for j in range(len(board[i])):
                if board[i][j] == "+": board[i][j] = "·"
        
        return move



    ####################################################################################################


    
    # █▄▄ █▀█ ▀█▀   █▀█ █░░ ▄▀█ █▄█ █▀▀ █▀█   ▄▄   █░█░█ ▄▀█ █░░ █░░
    # █▄█ █▄█ ░█░   █▀▀ █▄▄ █▀█ ░█░ ██▄ █▀▄   ░░   ▀▄▀▄▀ █▀█ █▄▄ █▄▄
    
    # Bot chooses where to put the wall or which wall to remove (70% accuracy)
    
    
    def bot_wall(plr):

        global wall_count, wall_id, board

        # Check available players
        check_path = []
        check_self_path = []
        characters = [["B1", "B2", "B3"], ["R1", "R2", "R3"], ["Y1", "Y2", "Y3"], ["W1", "W2", "W3"]]
        for i in range(player_num):
            for j in range(len(characters[i])):
                if players_character[i][j] == False and characters[i][j][0] != plr: check_path.append(characters[i][j])
                elif players_character[i][j] == False and characters[i][j][0] == plr: check_self_path.append(characters[i][j])

        # Check each opponent characters
        for k in range(len(check_path)):
            character_location = [0,0]
            for i in range(len(board)):
              for j in range(len(board[i])):
                if board[i][j] == check_path[k]:
                  character_location = [i,j]
                  break
              if character_location != [0,0]: break
            end_position = [[18,17],[18,16],[18,15],[18,14],[17,13],[16,13],[15,13],[14,13],[13,14],[13,15],[13,16],[13,17],[14,18],[15,18],[16,18],[17,18]]
            path = []
            for i in end_position:
                one_path = find_path(character_location, i)
                if one_path != None: path.append(one_path) 

            # if there's a path
            if path != []:
                path_length = len(path[0])
                path_pick = [0]
                for i in range(1,len(path)):
                    if path_length > len(path[i]):
                        path_length = len(path[i])
                        path_pick.append(i)
                for c in path[path_pick[-1]][1:]:
                    x, y = c
                    board[y][x] = '+'
            
            # updates the check_path list again by adding the paths
            check_path[k] = [check_path[k],path]
        
        # Check each self characters
        for k in range(len(check_self_path)):
            character_location = [0,0]
            for i in range(len(board)):
              for j in range(len(board[i])):
                if board[i][j] == check_self_path[k]:
                  character_location = [i,j]
                  break
              if character_location != [0,0]: break
            end_position = [[18,17],[18,16],[18,15],[18,14],[17,13],[16,13],[15,13],[14,13],[13,14],[13,15],[13,16],[13,17],[14,18],[15,18],[16,18],[17,18]]
            path = []
            for i in end_position:
                one_path = find_path([character_location[1],character_location[0]], [i[1],i[0]])
                if one_path != None: path.append(one_path) 
            
            if path != []:
                path_length = len(path[0])
                path_pick = [0]
                for i in range(1,len(path)):
                    if path_length > len(path[i]):
                        path_length = len(path[i])
                        path_pick.append(i)
            
            check_self_path[k] = [check_self_path[k],path]
        
        self_path = False
        for i in check_self_path:
            if i[1] != []:
                self_path = True
        
        # If self path not blocked
        if self_path:
            target = ""
            current_length = 1000
            
            # find a character that's closer to the win position
            for j in range(len(check_path)):
                if check_path[j][1] != []:
                    if (len(check_path[j][1][0]) > 3) and (len(check_path[j][1][0]) < current_length):
                        target = check_path[j][0]
                        current_length = len(check_path[j][1][0])

            # remove paths on board
            for i in range(len(board)):
                for j in range(len(board[i])):
                    if board[i][j] == "+": board[i][j] = "·"

            # start the pathfinding from over again but only for one character to reduce error
            if target != "":
                current_position = [0,0]
                for j in range(len(board)):
                    for k in range(len(board[j])):
                        if board[j][k] == target:
                            current_position = [k,j]
                            break
                    if current_position != [0,0]: break
                end_position = [[18,17],[18,16],[18,15],[18,14],[17,13],[16,13],[15,13],[14,13],[13,14],[13,15],[13,16],[13,17],[14,18],[15,18],[16,18],[17,18]]
                path = []
                for i in end_position:
                    one_path = find_path(current_position, i)
                    if one_path != None: path.append(one_path) 

                # recreate the path
                count = 0
                if path != []:
                    path_length = len(path[0])
                    path_pick = [0]
                    for i in range(1,len(path)):
                        if path_length > len(path[i]):
                            path_length = len(path[i])
                            path_pick.append(i)
                    for c in path[path_pick[-1]][1:]:
                        x, y = c
                        count += 1
                        board[y][x] = '+'

                # loop until the end for putting the grey wall
                for i in range(count):
                    position = path[path_pick[-1]][i+1:i+2][0]
                    # check wall availability
                    if board[position[1]-1][position[0]] == "■" and board[position[1]+1][position[0]] == "·":
                        wall_count += 1
                        board[position[1]][position[0]] = board[position[1]+1][position[0]] = "O"+str(wall_count)
                        break
                    elif board[position[1]+1][position[0]] == "■" and board[position[1]-1][position[0]] == "·":
                        wall_count += 1
                        board[position[1]][position[0]] = board[position[1]-1][position[0]] = "O"+str(wall_count)
                        break
                    elif board[position[1]][position[0]-1] == "■" and board[position[1]][position[0]+1] == "·":
                        wall_count += 1
                        board[position[1]][position[0]] = board[position[1]][position[0]+1] = "O"+str(wall_count)
                        break
                    elif board[position[1]][position[0]+1] == "■" and board[position[1]][position[0]-1] == "·":
                        wall_count += 1
                        board[position[1]][position[0]] = board[position[1]][position[0]-1] = "O"+str(wall_count)
                        break
                
                # remove the path on board
                for i in range(len(board)):
                  for j in range(len(board[i])):
                      if board[i][j] == "+": board[i][j] = "·"
            
            # if there's no valid target
            else:
                print("The bot has decided to pass its turn!")
                for i in range(len(board)):
                  for j in range(len(board[i])):
                      if board[i][j] == "+": board[i][j] = "·"
                time.sleep(1.5)
        
        # if blocked, choose to remove a wall
        else:
            for i in range(len(board)):
                for j in range(len(board[i])):
                    if board[i][j] == "+": board[i][j] = "·"
            
            # Find character
            characters = [["B1", "B2", "B3"], ["R1", "R2", "R3"], ["Y1", "Y2", "Y3"], ["W1", "W2", "W3"]]
            current_character = ""
            for i in range(len(characters[current_turn-1])):
                if players_character[current_turn-1][i] == False:
                    current_character = characters[current_turn-1][i]
                    break
            
            # Check position
            current_position = [0,0]
            for i in range(len(board)):
                for j in range(len(board[i])):
                    if board[i][j] == current_character:
                        current_position = [i,j]
                        break
                    if current_position != [0,0]: break
            
            # Find all walls
            end_position = []
            for i in range(len(board)):
                for j in range(len(board[i])):
                    if board[i][j][0] == "O": end_position.append([i,j])
            
            path = []
            for i in end_position:
                one_path = find_path(current_position, i)
                if one_path != None: path.append(one_path) 
            
            target = [0,0]
            if path != []:
                path_length = len(path[0])
                path_pick = [0]
                for i in range(1,len(path)):
                    if path_length > len(path[i]):
                        path_length = len(path[i])
                        path_pick.append(i)
                target = path[path_pick[-1]][-1]

            wall_target = board[target[0]][target[1]]
            wall_count -= 1
            if wall_target[0] == "O":
              for i in range(len(board)):
                  for j in range(len(board[i])):
                      if board[i][j] == wall_target: board[i][j] = "·"
            else:
              print("The bot has decided to pass its turn!")
              for i in range(len(board)):
                for j in range(len(board[i])):
                    if board[i][j] == "+": board[i][j] = "·"
              time.sleep(1.5)



    ####################################################################################################


    
    # █▄▄ █▀█ ▀█▀   █▀█ █░░ ▄▀█ █▄█ █▀▀ █▀█   ▄▄   █▀▄▀█ █ █▄░█ █▀█ ▀█▀ ▄▀█ █░█ █▀█
    # █▄█ █▄█ ░█░   █▀▀ █▄▄ █▀█ ░█░ ██▄ █▀▄   ░░   █░▀░█ █ █░▀█ █▄█ ░█░ █▀█ █▄█ █▀▄
    
    # Bot moves the minotaur
    
    
    def bot_minotaur_move(current_position,plr):
        
        # Check all available target
        check_path = []
        characters = [["B1", "B2", "B3"], ["R1", "R2", "R3"], ["Y1", "Y2", "Y3"], ["W1", "W2", "W3"]]
        for i in range(player_num):
            for j in range(len(characters[i])):
                if (players_character[i][j] == False) and (plr != characters[i][j][0]):
                    check_path.append(characters[i][j])
        
        path = []

        for i in check_path:

            # Check player character
            character_location = [0,0]
            for j in range(len(board)):
              for k in range(len(board[j])):
                if board[j][k] == i:
                  character_location = [j,k]
                  break
              if character_location != [0,0]: break
            
            # Find any available paths
            new_path = find_path([current_position[1],current_position[0]], [character_location[1],character_location[0]-1])
            if new_path == None: new_path = find_path([current_position[1],current_position[0]], [character_location[1],character_location[0]+1])
            if new_path == None: new_path = find_path([current_position[1],current_position[0]], [character_location[1]-1,character_location[0]])
            if new_path == None: new_path = find_path([current_position[1],current_position[0]], [character_location[1]+1,character_location[0]])

            if (new_path != None) and ((len(new_path) < len(path)) or (len(path) == 0)): path = new_path

        # Creates the path
        if path != None:
            for c in path[1:]:
                x, y = c
                board[y][x] = '+'
        
        # Find the next position to move or PASS
        move = "PASS"
        current_location = [current_position[0],current_position[1]]
        if (board[current_location[0]][current_location[1]+1] == "+") or (board[current_location[0]][current_location[1]+1] in "B1B2B3R1R2R3Y1Y2Y3W1W2W3"): move = "D"
        elif (board[current_location[0]][current_location[1]-1] == "+") or (board[current_location[0]][current_location[1]-1] in "B1B2B3R1R2R3Y1Y2Y3W1W2W3"): move = "A"
        elif (board[current_location[0]+1][current_location[1]] == "+") or (board[current_location[0]+1][current_location[1]] in "B1B2B3R1R2R3Y1Y2Y3W1W2W3"): move = "S"
        elif (board[current_location[0]-1][current_location[1]] == "+") or (board[current_location[0]-1][current_location[1]] in "B1B2B3R1R2R3Y1Y2Y3W1W2W3"): move = "W"
        else: move = "PASS"
        
        # Removes the path on board
        for i in range(len(board)):
            for j in range(len(board[i])):
                if board[i][j] == "+": board[i][j] = "·"
        
        return move



    ####################################################################################################



    # █░█ █ █▀▀ ▀█▀ █▀█ █▀█ █▄█   █▀ █▀▀ █▀▀ █▄░█ █▀▀
    # ▀▄▀ █ █▄▄ ░█░ █▄█ █▀▄ ░█░   ▄█ █▄▄ ██▄ █░▀█ ██▄

    # If a player wins the game

    
    def DisplayWin(player_name,second):

      print('''====================================================================================================

      
  ██╗░░░██╗██╗░█████╗░████████╗░█████╗░██████╗░██╗░░░██╗
  ██║░░░██║██║██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗╚██╗░██╔╝
  ╚██╗░██╔╝██║██║░░╚═╝░░░██║░░░██║░░██║██████╔╝░╚████╔╝░
  ░╚████╔╝░██║██║░░██╗░░░██║░░░██║░░██║██╔══██╗░░╚██╔╝░░
  ░░╚██╔╝░░██║╚█████╔╝░░░██║░░░╚█████╔╝██║░░██║░░░██║░░░
  ░░░╚═╝░░░╚═╝░╚════╝░░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░
      
      
      ''')

      # Checks either player/bot wins the game
      if player_name != bot_id: text = player_name + " wins the game! "
      else: text = "Bot player wins the game! "
      
      # Time delay
      for i in range(len(text)):
        print(text[:-(len(text))+i], end = "\r")
        time.sleep(0.2)
      
      print('''
      
      
      
      ''')
      
      # Game Log Save
      if player_name != bot_id: player_name = "Bot"
      runner_ups = []
      c = 1
      
      # Game Log Save - Runner ups
      for i in range(player_num):
          if players_name[i] != bot_id:
              if players_name[i] != player_name:
                  runner_ups.append(players_name[i])
          else:
              c += 1
              if c <= player_num:
                runner_ups.append("Bot")
      runner_ups = ", ".join(runner_ups)

      # Game Log Save - Game time
      minute = second // 60
      second %= 60
      hour = minute // 60
      minute %= 60

      # The data for saving it into the game log
      data = [datetime.datetime.now().strftime("%c"),"    Winner: " + player_name,"    Opponents: " + runner_ups,"    Game Mode: " + gamemode_chosen,"    Game Speed: " + gamespeed_chosen.lower(),"    Game Length: "+str(int(hour))+" : "+str(int(minute))+" : "+str(int(second))+"",""]

      game_log = []

      # If the game log file exists
      try:
        for line in open("game_log.txt","r"):
          game_log.append(line)
        with open("game_log.txt", "w") as file:
          for k in game_log:
            file.write(k)
          file.write(data[0]+"\n")
          file.write(data[1]+"\n")
          file.write(data[2]+"\n")
          file.write(data[3]+"\n")
          file.write(data[4]+"\n")
          file.write(data[5]+"\n")
          file.write(data[6]+"\n")

      # If the game log file doesn't exist
      except:
        open("game_log.dat", "x")
        with open("game_log.txt", "w") as file:
          file.write(data[0]+"\n")
          file.write(data[1]+"\n")
          file.write(data[2]+"\n")
          file.write(data[3]+"\n")
          file.write(data[4]+"\n")
          file.write(data[5]+"\n")
          file.write(data[6]+"\n")

      # Let the user return to the home screen
      time.sleep(5)
      take_input("Click \"Enter\" to return: ")



    ####################################################################################################



    # █▀▄▀█ ▄▀█ █ █▄░█   █▀▀ ▄▀█ █▀▄▀█ █▀▀
    # █░▀░█ █▀█ █ █░▀█   █▄█ █▀█ █░▀░█ ██▄
    

    def MainGame():
      
      global board, players_name, players, players_character, current_turn, dice, minotaur_at_start, wall_count, wall_id, minotaur_move

      # Record time
      starting_time = time.time()

      # Game loop
      while True:

        show_board()

        finished = False
        current_player = players[current_turn-1]

        # Player rolls the dice
        if players_name[current_turn-1] != bot_id:
          take_input("(" + current_player[0] + ") " + players_name[current_turn-1] + "'s turn. Click \"Enter\" to roll the dice: ")
        else:
          print("(" + current_player[0] + ") Bot's turn.")
          time.sleep(1)
        dice_result = random.choice(dice)
        
        print("Throwing the dice...")
        time.sleep(1)
        print("Dice is rolling...")
        time.sleep(1)
        print("You got a... " ,end="")
        time.sleep(1)

        
        
        ####################################################################################################



        # █▀█ █▀▀ █▀ █░█ █░░ ▀█▀   ▄▄   █▀▄ █ █▀▀ █ ▀█▀ █▀
        # █▀▄ ██▄ ▄█ █▄█ █▄▄ ░█░   ░░   █▄▀ █ █▄█ █ ░█░ ▄█


        if dice_result.isdigit():

          print(dice_result+"!")
          time.sleep(3)

          # Total steps the character can move
          count = int(dice_result)
          
          # Find available characters
          available_characters = []
          num = 1
          for i in range(3):
            if players_character[current_turn-1][i] == False:
              # Check possible moves first
              character_location = [0,0]
              for j in range(len(board)):
                for k in range(len(board[j])):
                  character = ""
                  if current_player == "Blue": character = "B" + str(num)
                  elif current_player == "Red": character = "R" + str(num)
                  elif current_player == "Yellow": character = "Y" + str(num)
                  elif current_player == "White": character = "W" + str(num)
                  if board[j][k] == character:
                    character_location = [j,k]
                    break
                if character_location != [0,0]: break
              available_move = False
              if board[character_location[0]][character_location[1]-1] == "·": available_move = True
              elif board[character_location[0]][character_location[1]+1] == "·": available_move = True
              elif board[character_location[0]-1][character_location[1]] == "·": available_move = True
              elif board[character_location[0]+1][character_location[1]] == "·": available_move = True
              if available_move: available_characters.append(num)
            num += 1
          
          show_board(current_player)

          # Choose which character to move
          character = ""
          while True:
            if players_name[current_turn-1] != bot_id:
              character = take_input("Choose a character " + str(available_characters) + " to move: ")
            else:
              print("Choosing a character...")
              character = str(available_characters[0])
              time.sleep(1)
            if character.isdigit():
              if int(character) in available_characters:
                if current_player == "Blue": character = "B" + character
                elif current_player == "Red": character = "R" + character
                elif current_player == "Yellow": character = "Y" + character
                elif current_player == "White": character = "W" + character
                break
            print("Character not found!")
            time.sleep(1.5)
          
          # Character move
          move = ""
          while (count > 0) and (move.lower() != "pass"):
            
            show_board(current_player,int(character[1]))

            # Check current position
            character_location = [0,0]
            for i in range(len(board)):
              for j in range(len(board[i])):
                if board[i][j] == character:
                  character_location = [i,j]
                  break
              if character_location != [0,0]: break
            
            # Move
            if players_name[current_turn-1] != bot_id:
              move = take_input("(Steps left: " + str(count) + ") Type W/A/S/D to move or type \"PASS\" to finish your turn: ")
            else:
              print("(Steps left: " + str(count) + ") Attempting the move...")
              move = bot_move([character_location[1],character_location[0]])
              time.sleep(1)
            
            # After player inputs WASD/PASS
            if move.upper() == "W":
              check = board[character_location[0]-1][character_location[1]]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]-1][character_location[1]] = character
                count -= 1
              elif check == "⁘":   # win
                CharacterFinish(current_turn,character_location,character)
                count = 0
                print(current_player+"'s character reached the end point!")
                time.sleep(1.5)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif move.upper() == "A":
              check = board[character_location[0]][character_location[1]-1]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]][character_location[1]-1] = character
                count -= 1
              elif check == "⁘":   # win
                CharacterFinish(current_turn,character_location,character)
                count = 0
                print(current_player+"'s character reached the end point!")
                time.sleep(1.5)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif move.upper() == "S":
              check = board[character_location[0]+1][character_location[1]]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]+1][character_location[1]] = character
                count -= 1
              elif check == "⁘":   # win
                CharacterFinish(current_turn,character_location,character)
                count = 0
                print(current_player+"'s character reached the end point!")
                time.sleep(1.5)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif move.upper() == "D":
              check = board[character_location[0]][character_location[1]+1]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]][character_location[1]+1] = character
                count -= 1
              elif check == "⁘":   # win
                CharacterFinish(current_turn,character_location,character)
                count = 0
                print(current_player+"'s character reached the end point!")
                time.sleep(1.5)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif (move.lower() != "pass"):
              print("Invalid input!")
              time.sleep(1.5)
            
            finished = True

        
        
        ####################################################################################################



        # █▀█ █▀▀ █▀ █░█ █░░ ▀█▀   ▄▄   █░█░█ ▄▀█ █░░ █░░
        # █▀▄ ██▄ ▄█ █▄█ █▄▄ ░█░   ░░   ▀▄▀▄▀ █▀█ █▄▄ █▄▄


        if dice_result == "Wall":
          
          try: print(f"{Style.BRIGHT}{Fore.WHITE}WALL!")
          except: print("WALL!")
          time.sleep(3)
          
          show_board("Wall")

          # Placing/Removing the grey wall for players
          if players_name[current_turn-1] != bot_id:
            wall_mode = take_input("Type 1 to place wall or type 2 to remove wall: ")
            while (wall_mode != "1" and wall_mode != "2") or (wall_mode != "2" and wall_count <= 0):
              if wall_mode != "1" and wall_mode != "2": wall_mode = take_input("Type 1 to place wall or type 2 to remove wall: ")
              elif wall_mode != "2" and wall_count <= 0: wall_mode = take_input("There are no walls on the map! Please place a wall by typing 1: ")
            if int(wall_mode) == 1: grey_walls_place()
            if int(wall_mode) == 2: grey_walls_remove()
          
          # Placing/Removing the grey wall for bots
          else:
            bot_wall(current_player[0])
            time.sleep(2)
          
          finished = True

        
        
        ####################################################################################################



        # █▀█ █▀▀ █▀ █░█ █░░ ▀█▀   ▄▄   █▀▄▀█ █ █▄░█ █▀█ ▀█▀ ▄▀█ █░█ █▀█
        # █▀▄ ██▄ ▄█ █▄█ █▄▄ ░█░   ░░   █░▀░█ █ █░▀█ █▄█ ░█░ █▀█ █▄█ █▀▄


        if dice_result == "Minotaur":
          
          try: print(f"{Style.BRIGHT}{Fore.RED}MINOTAUR!")
          except: print("MINOTAUR!")
          time.sleep(3)

          # If minotaur is on the middle
          if minotaur_at_start:
            
            place_minotaur = ""
            
            show_board("Minotaur")
            
            if players_name[current_turn-1] != bot_id:
              
              while True:
                
                place_minotaur = take_input("Place the minotaur between position A to P: ")
                
                if (place_minotaur.upper() in "ABCDEFGHIJKLMNOP") and (len(place_minotaur) == 1):
                  check = False

                  if board[13][14] == "·": board[13][14] = "A"
                  if board[13][15] == "·": board[13][15] = "B"
                  if board[13][16] == "·": board[13][16] = "C"
                  if board[13][17] == "·": board[13][17] = "D"
                  if board[14][13] == "·": board[14][13] = "E"
                  if board[14][18] == "·": board[14][18] = "F"
                  if board[15][13] == "·": board[15][13] = "G"
                  if board[15][18] == "·": board[15][18] = "H"
                  if board[16][13] == "·": board[16][13] = "I"
                  if board[16][18] == "·": board[16][18] = "J"
                  if board[17][13] == "·": board[17][13] = "K"
                  if board[17][18] == "·": board[17][18] = "L"
                  if board[18][14] == "·": board[18][14] = "M"
                  if board[18][15] == "·": board[18][15] = "N"
                  if board[18][16] == "·": board[18][16] = "O"
                  if board[18][17] == "·": board[18][17] = "P"

                  for i in range(len(board)):
                    for j in range(len(board[i])):
                      if board[i][j] in place_minotaur.upper(): check = True
                      
                  if board[13][14] == "A": board[13][14] = "·"
                  if board[13][15] == "B": board[13][15] = "·"
                  if board[13][16] == "C": board[13][16] = "·"
                  if board[13][17] == "D": board[13][17] = "·"
                  if board[14][13] == "E": board[14][13] = "·"
                  if board[14][18] == "F": board[14][18] = "·"
                  if board[15][13] == "G": board[15][13] = "·"
                  if board[15][18] == "H": board[15][18] = "·"
                  if board[16][13] == "I": board[16][13] = "·"
                  if board[16][18] == "J": board[16][18] = "·"
                  if board[17][13] == "K": board[17][13] = "·"
                  if board[17][18] == "L": board[17][18] = "·"
                  if board[18][14] == "M": board[18][14] = "·"
                  if board[18][15] == "N": board[18][15] = "·"
                  if board[18][16] == "O": board[18][16] = "·"
                  if board[18][17] == "P": board[18][17] = "·"
                  
                  if check: break

                else:
                  print("Invalid input!")
                  time.sleep(1.5)

            else:
              
              print("Placing the minotaur...")
              
              while True:
                
                place_minotaur = random.choice(['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'])
                check = False
                
                for i in range(len(board)):
                  for j in range(len(board[i])):
                    if board[i][j] == place_minotaur: check = True
                
                if check: break
              
              time.sleep(1)
            
            MinoMoveFromStart(place_minotaur)
            
            minotaur_at_start = False


          # minotaur move
          count = minotaur_move
          move = ""
          while (count > 0) and (move.lower() != "pass"):
            
            show_board()

            # Check current position
            character = "M"
            character_location = [0,0]
            for i in range(len(board)):
              for j in range(len(board[i])):
                if board[i][j] == character:
                  character_location = [i,j]
                  break
              if character_location != [0,0]: break

            # Move WASD
            if players_name[current_turn-1] != bot_id:
              move = take_input("(Steps left: " + str(count) + ") Type W/A/S/D to move or type \"PASS\" to finish your turn: ")
            else:
              print("(Steps left: " + str(count) + ") Attempting the move...")
              move = bot_minotaur_move([character_location[0],character_location[1]],current_player[0])
              time.sleep(1)
            if move.upper() == "W":
              check = board[character_location[0]-1][character_location[1]]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]-1][character_location[1]] = character
                count -= 1
              elif check in "B1B2B3R1R2R3Y1Y2Y3W1W2W3":   # Found a character!
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]-1][character_location[1]] = "·"
                count = 0
                minotaur_at_start = True
                MinoPlayerReturn(check)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif move.upper() == "A":
              check = board[character_location[0]][character_location[1]-1]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]][character_location[1]-1] = character
                count -= 1
              elif check in "B1B2B3R1R2R3Y1Y2Y3W1W2W3":   # Found a character!
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]][character_location[1]-1] = "·"
                count = 0
                minotaur_at_start = True
                MinoPlayerReturn(check)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif move.upper() == "S":
              check = board[character_location[0]+1][character_location[1]]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]+1][character_location[1]] = character
                count -= 1
              elif check in "B1B2B3R1R2R3Y1Y2Y3W1W2W3":   # Found a character!
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]+1][character_location[1]] = "·"
                count = 0
                minotaur_at_start = True
                MinoPlayerReturn(check)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif move.upper() == "D":
              check = board[character_location[0]][character_location[1]+1]
              if check == "·":
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]][character_location[1]+1] = character
                count -= 1
              elif check in "B1B2B3R1R2R3Y1Y2Y3W1W2W3":   # Found a character!
                board[character_location[0]][character_location[1]] = "·"
                board[character_location[0]][character_location[1]+1] = "·"
                count = 0
                minotaur_at_start = True
                MinoPlayerReturn(check)
              else:
                print("Path blocked!")
                time.sleep(1.5)
            elif (move.upper() != "PASS"):
              print("Invalid input!")
              time.sleep(1.5)
            finished = True

        
        
        ####################################################################################################
        


        # Check win
        if (players_character[0][0] and players_character[0][1] and players_character[0][2]):
          ending_time = time.time()
          DisplayWin(players_name[0],(round(ending_time - starting_time,0)))
          break
        elif (players_character[1][0] and players_character[1][1] and players_character[1][2]):
          ending_time = time.time()
          DisplayWin(players_name[1],(round(ending_time - starting_time,0)))
          break
        elif (players_character[2][0] and players_character[2][1] and players_character[2][2]):
          ending_time = time.time()
          DisplayWin(players_name[2],(round(ending_time - starting_time,0)))
          break
        elif (players_character[3][0] and players_character[3][1] and players_character[3][2]):
          ending_time = time.time()
          DisplayWin(players_name[3],(round(ending_time - starting_time,0)))
          break


        # Change turn
        if finished:
          current_turn += 1
          if current_turn > player_num: current_turn = 1

        
        
      ####################################################################################################
      


      # █▀█ █▀▀ █▀ █▀▀ ▀█▀
      # █▀▄ ██▄ ▄█ ██▄ ░█░

      # (Outside the game loop)
        

      # Board reset
      board = [["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
                ["■","B2","B3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R1","R2","■"],
                ["■","B1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","R3","■"],
                ["■","·","·","·","·","·","■","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","■","·","·","·","·","·","■"],
                ["■","·","·","O","·","·","■","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","■","·","·","O","·","·","■"],
                ["■","·","·","O","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","O","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","·","·","·","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","·","·","·","·","·","■"],
                ["■","·","·","■","■","■","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","■","■","■","·","·","■"],
                ["■","·","·","·","·","·","■","·","·","O","O","·","·","■","■","·","·","■","■","·","·","O","O","·","·","■","·","·","·","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■"],
                ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
                ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","·","·","·","■","·","⁘","M","M","⁘","·","■","·","·","·","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","·","·","·","■","·","⁘","M","M","⁘","·","■","·","·","·","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","⁘","⁘","⁘","⁘","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
                ["■","·","·","■","·","·","■","·","·","■","·","·","·","·","·","·","·","·","·","·","·","·","■","·","·","■","·","·","■","·","·","■"],
                ["■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","·","·","·","■","·","·","O","O","·","·","■","■","·","·","■","■","·","·","O","O","·","·","■","·","·","·","·","·","■"],
                ["■","·","·","■","■","■","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","■","■","■","·","·","■"],
                ["■","·","·","·","·","·","■","·","·","·","·","·","·","·","■","·","·","■","·","·","·","·","·","·","·","■","·","·","·","·","·","■"],
                ["■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■","■","■","·","·","·","·","·","·","·","·","■"],
                ["■","·","·","O","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","·","·","·","O","·","·","■"],
                ["■","·","·","O","·","·","■","·","·","·","·","■","·","·","·","·","·","·","·","·","■","·","·","·","·","■","·","·","O","·","·","■"],
                ["■","·","·","·","·","·","■","■","■","·","·","■","■","■","■","·","·","■","■","■","■","·","·","■","■","■","·","·","·","·","·","■"],
                ["■","W3","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y1","■"],
                ["■","W2","W1","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","·","Y3","Y2","■"],
                ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"]]


      # Variables reset
      players_name = ["Blue", "Red", "Yellow", "White"]
      players = ["Blue", "Red", "Yellow", "White"]
      players_character = [[False, False, False], [False, False, False], [False, False, False], [False, False, False]]
      current_turn = 1
      dice = ["3","4","5","6","Wall","Minotaur"]
      wall_count = 8
      wall_id = 8
      minotaur_move = 8
      minotaur_at_start = True


      # Goes back to home screen
      Main()



    ####################################################################################################
    ####################################################################################################



    # █░█ █▀█ █▀▄▀█ █▀▀   █▀ █▀▀ █▀█ █▀▀ █▀▀ █▄░█
    # █▀█ █▄█ █░▀░█ ██▄   ▄█ █▄▄ █▀▄ ██▄ ██▄ █░▀█



    # 1. Play
    def Play():
      
      global board, players_name, player_num, dice, minotaur_move, players_character, wall_count, wall_id, gamemode_chosen, gamespeed_chosen
      
      # Settings...
      print('''====================================================================================================

  █▀▀ ▄▀█ █▀▄▀█ █▀▀ █▀▄▀█ █▀█ █▀▄ █▀▀
  █▄█ █▀█ █░▀░█ ██▄ █░▀░█ █▄█ █▄▀ ██▄


    1. Classic mode
    2. Custom mode
      ''')
      print("====================================================================================================")
      
      # Gamemode selection
      game_mode = input("Select by typing the number: ")
      while (game_mode != "1") and (game_mode != "2"):
        print("Invalid input!")
        time.sleep(1.5)
        game_mode = input("Select by typing the number: ")

      # For custom gamemode
      if game_mode == "2":
        random_map = "Classic"
        dice_1, dice_2, dice_3, dice_4, dice_5, dice_6 = "3", "4", "5", "6", "Wall", "Minotaur"
        new_minotaur_move = "8"
        choice = ""
        while (choice != "0"):
          print(f'''====================================================================================================
          
  █▀▀ ▄▀█ █▀▄▀█ █▀▀ █▀▄▀█ █▀█ █▀▄ █▀▀   █▀ █▀▀ ▀█▀ █░█ █▀█
  █▄█ █▀█ █░▀░█ ██▄ █░▀░█ █▄█ █▄▀ ██▄   ▄█ ██▄ ░█░ █▄█ █▀▀


    1. Map (Classic or 1-{len(custom_board)-1}): {random_map}

    Dice:
    2. Dice 1: {dice_1}
    3. Dice 2: {dice_2}
    4. Dice 3: {dice_3}
    5. Dice 4: {dice_4}
    6. Dice 5: {dice_5}
    7. Dice 6: {dice_6}

    Minotaur:
    8. Moves: {new_minotaur_move}

    0. Done!

====================================================================================================''')
          choice = input("Select by typing the number: ")
          
          # When the input is 1-8/0
          if choice == "1":
            x = input("Map (Classic/1-"+str(len(custom_board)-1)+"): ")
            if (x.isdigit()):
              if (int(x) >= 1 and int(x) <= (len(custom_board)-1)): random_map = int(x)
            elif (x == "Classic"): random_map = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice == "2":
            x = input("Dice 1 (0-.../Wall/Minotaur): ")
            if (x.isdigit()) or (x == "Wall") or (x == "Minotaur"): dice_1 = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice == "3":
            x = input("Dice 2 (0-.../Wall/Minotaur): ")
            if (x.isdigit()) or (x == "Wall") or (x == "Minotaur"): dice_2 = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice == "4":
            x = input("Dice 3 (0-.../Wall/Minotaur): ")
            if (x.isdigit()) or (x == "Wall") or (x == "Minotaur"): dice_3 = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice == "5":
            x = input("Dice 4 (0-.../Wall/Minotaur): ")
            if (x.isdigit()) or (x == "Wall") or (x == "Minotaur"): dice_4 = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice == "6":
            x = input("Dice 5 (0-.../Wall/Minotaur): ")
            if (x.isdigit()) or (x == "Wall") or (x == "Minotaur"): dice_5 = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice == "7":
            x = input("Dice 6 (0-.../Wall/Minotaur): ")
            if (x.isdigit()) or (x == "Wall") or (x == "Minotaur"): dice_6 = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice == "8":
            x = input("Minotaur moves (1-...): ")
            if (x.isdigit()) and (int(x) > 0): new_minotaur_move = x
            else:
              print("Invalid input!")
              time.sleep(1.5)
          elif choice != "0":
            print("Invalid input!")
            time.sleep(2)

        # Set all changed values
        if random_map != "Classic":
          gamemode_chosen = "Custom"
          wall_count = wall_id = custom_board[random_map][0]
          for i in range(len(custom_board[random_map][1])):
            for j in range(len(custom_board[random_map][1][i])):
              board[i][j] = custom_board[random_map][1][i][j]
        dice = [dice_1,dice_2,dice_3,dice_4,dice_5,dice_6]
        minotaur_move = int(new_minotaur_move)

      # Game speed
      print("""====================================================================================================
  
  Avaiable game speed:
  SLOW     30 minutes   3 characters
  MEDIUM   20 minutes   2 characters
  FAST     10 minutes   1 character

====================================================================================================""")
      game_speed = input("Type the game speed (SLOW,MEDIUM,FAST): ").upper()
      while game_speed != "SLOW" and game_speed != "MEDIUM" and game_speed != "FAST":
        print("Invalid input!")
        time.sleep(1.5)
        game_speed = input("Type the game speed (SLOW,MEDIUM,FAST): ")
      if game_speed == "MEDIUM":
        gamespeed_chosen = "MEDIUM"
        players_character = [[False, False, True], [False, False, True], [False, False, True], [False, False, True]]
      elif game_speed == "FAST":
        gamespeed_chosen = "FAST"
        players_character = [[False, True, True], [False, True, True], [False, True, True], [False, True, True]]

      # Total players
      print("====================================================================================================")
      player_num = input("Type the number of players (1-4): ")
      while player_num != "1" and player_num != "2" and player_num != "3" and player_num != "4":
        print("Invalid input!")
        time.sleep(1.5)
        player_num = input("Type the number of players (1-4): ")
      player_num = int(player_num)

      # Bot players
      bot_num = 0
      while True:
        if player_num == 1:
          bot_num = input("Type the number of bots (1-3): ")
          if bot_num == "1" or bot_num == "2" or bot_num == "3": break
        elif player_num == 2:
          bot_num = input("Type the number of bots (0-2): ")
          if bot_num == "0" or bot_num == "1" or bot_num == "2": break
        elif player_num == 3:
          bot_num = input("Type the number of bots (0-1): ")
          if bot_num == "0" or bot_num == "1": break
        elif player_num == 4: break
      bot_num = int(bot_num)
      if bot_num > 0:
        for i in range(player_num,player_num+bot_num): players_name[i] = bot_id

      # Player name
      print("====================================================================================================")
      for i in range(player_num):
        nameinput = ""
        if i == 0:
          nameinput = input("Enter the name for the first player (B). Otherwise, click \"Enter\": ")
          while nameinput == bot_id:
            print("Forbidden name!")
            time.sleep(1.5)
            nameinput = input("Enter the name for the first player (B). Otherwise, click \"Enter\": ")
        if i == 1:
          nameinput = input("Enter the name for the second player (R). Otherwise, click \"Enter\": ")
          while nameinput == bot_id:
            print("Forbidden name!")
            time.sleep(1.5)
            nameinput = input("Enter the name for the first player (R). Otherwise, click \"Enter\": ")
        if i == 2:
          nameinput = input("Enter the name for the third player (Y). Otherwise, click \"Enter\": ")
          while nameinput == bot_id:
            print("Forbidden name!")
            time.sleep(1.5)
            nameinput = input("Enter the name for the first player (Y). Otherwise, click \"Enter\": ")
        if i == 3:
          nameinput = input("Enter the name for the fourth player (W). Otherwise, click \"Enter\": ")
          while nameinput == bot_id:
            print("Forbidden name!")
            time.sleep(1.5)
            nameinput = input("Enter the name for the first player (W). Otherwise, click \"Enter\": ")
        if nameinput != "": players_name[i] = nameinput

      player_num += bot_num

      # Characters setup
      for i in range(len(board)):
        for j in range(len(board[i])):
          if board[i][j] == "B2":
            if (players_character[0][1] == True): board[i][j] = "·"
          if board[i][j] == "B3":
            if (players_character[0][2] == True): board[i][j] = "·"
          if board[i][j] == "R2":
            if (players_character[1][1] == True): board[i][j] = "·"
          if board[i][j] == "R3":
            if (players_character[1][2] == True): board[i][j] = "·"
          if board[i][j] == "Y1":
            if (player_num <= 2): board[i][j] = "·"
          if board[i][j] == "Y2":
            if (player_num <= 2) or (players_character[2][1] == True): board[i][j] = "·"
          if board[i][j] == "Y3":
            if (player_num <= 2) or (players_character[2][2] == True): board[i][j] = "·"
          if board[i][j] == "W1":
            if (player_num <= 3): board[i][j] = "·"
          if board[i][j] == "W2":
            if (player_num <= 3) or (players_character[3][1] == True): board[i][j] = "·"
          if board[i][j] == "W3":
            if (player_num <= 3) or (players_character[3][2] == True): board[i][j] = "·"

      # Start game
      print("====================================================================================================")
      input("The game is ready. Click \"Enter\" to start the game: ")
      print("====================================================================================================")
      
      # Loading screen
      for i in range(100):
        print("\n\n\n\n\n\n\n\n\n\n")
        time.sleep(0.001)
      time.sleep(2)
      for i in range(100):
        print("Loading game:", i+1, "%", end = "\r")
        time.sleep(0.01)
      for i in range(100):
        print("\n\n\n\n\n\n\n\n\n\n")
        time.sleep(0.001)
      time.sleep(2)

      MainGame()


    # 2. Instructions
    def InstructionPage():
      print('''====================================================================================================

  █ █▄░█ █▀ ▀█▀ █▀█ █░█ █▀▀ ▀█▀ █ █▀█ █▄░█ █▀
  █ █░▀█ ▄█ ░█░ █▀▄ █▄█ █▄▄ ░█░ █ █▄█ █░▀█ ▄█


    OVERVIEW

        The game is played by a group of 2-4.

        Each player will be given 1-3 troops of respective colors:
        Blue (B), Red (R), Yellow (Y), and White (W).

        Players need to move all of their troops to the middle of the map at the '⁘' position.
        Once a player's troops reach the '⁘' of the middle of the map,
        that player will win.


    MAP

        On the map, there are:
          - Immovable walls
          - Moveable walls (also known as grey walls)
          - '⁘' (the winning position located in the middle of the map)
          - Minotaur

        The Minotaur is located in the middle surrounded by '⁘'.
        The troops are suggested to move away from the Minotaur if possible.

        Once the Minotaur touches the troop,
        it will be sent back to its base with respect to the color
        and the minotaur will go back to the middle of the '⁘'s.


    TURNS

        At the start of a player's turn, the player has to roll a dice.

        When rolling 3-6 (excluding custom gamemode),
        the player can choose one of their troops
        and start moving in a classic 'WASD' movement (A=left, W=upwards, S=downwards, D=right).

        The player can then choose the direction of the movement and move,
        or 'PASS' the turn as they wished.

        After a player's turns are used up or the player chooses to pass,
        the next player might proceed to such action until one of the players wins.

        While rolling 'Wall',
        the player can choose to place 1 set of grey walls to possibly block players' troops' movement,
        or remove 1 set of them for their own good.
        1 set of grey walls is equal to 2 blocks of grey walls.

        If the player rolls 'Minotaur',
        they may command the Minotaur and make it move to the directions and place they desire,
        whether the player wants the Minotaur to attack other players,
        or to simply keep a distance from that said player. 


    WINS

        The winning condition is that one of the players has to lead
        all of his/her troops to the middle location of the map, which is the '⁘'.

        When a player's troop is directly standing above the '⁘' location,
        the troop will then disappear.

        Once all of one's troops are gone, the player wins the game.
    

    TECHNICAL

        If you want to go back to the home page during the game,
        type '!HOME'
      ''')
      print("====================================================================================================")
      input("Click \"Enter\" to return: ")


    # 3. Map List
    def MapListPage():

      print('''====================================================================================================

  █▀▄▀█ ▄▀█ █▀█   █░░ █ █▀ ▀█▀
  █░▀░█ █▀█ █▀▀   █▄▄ █ ▄█ ░█░

      ''')

      # Print all boards
      for i in range(len(custom_board)):
        print("         ",i,":",'\n',end="")
        for j in custom_board[i][1]:
          print("        ",end="")
          for k in j:
            if k in "B1B2B3": print("B",end=" ")
            elif k in "R1R2R3": print("R",end=" ")
            elif k in "Y1Y2Y3": print("Y",end=" ")
            elif k in "W1W2W3": print("W",end=" ")
            elif k == "·": print(k,end=" ")
            elif k == "■": print(k,end=" ")
            elif k == "V": print(k,end=" ")
            elif k == "M": print(k,end=" ")
            elif k[0] == "O": print(k[0],end=" ")
            else: print(k,end=" ")
          print()
          time.sleep(0.05)
        time.sleep(0.5)
        print()
      print("====================================================================================================")
      input("Click \"Enter\" to return: ")

    
    # 4. Credits
    def CreditPage():
      print("====================================================================================================")
      print('''
  █▀▀ █▀█ █▀▀ █▀▄ █ ▀█▀ █▀
  █▄▄ █▀▄ ██▄ █▄▀ █ ░█░ ▄█


    A GAME CREATED BY TEAM 1H2-2

    NICHOLAS WILSON KURNIAWAN
    CHENG SUM
    LI WAN YAU
    QIAO LECHONG

    INSPIRED BY AN OLD LEGO BOARD GAME CALLED 'MINOTAURUS'

    2022
      ''')
      print("====================================================================================================")
      input("Click \"Enter\" to return: ")


    # 5. Game Log
    def GameLogPage():
      print("====================================================================================================")
      print('''
  █▀▀ ▄▀█ █▀▄▀█ █▀▀   █░░ █▀█ █▀▀
  █▄█ █▀█ █░▀░█ ██▄   █▄▄ █▄█ █▄█

      ''')

      # The game log
      try:
        for line in open("game_log.txt","r"):
          text = line.replace(bot_id,"Bot")
          print(text,end='')

      # If the file doesn't exist
      except: open("game_log.txt", "x")

      print("\n====================================================================================================")
      input("Click \"Enter\" to return: ")


    # Home page
    def Main():
      while True:
        print("====================================================================================================")
        print('''
      
  █▀█ █▄█ █▄░█ █▀█ ▀█▀ ▄▀█ █░█ █▀█ █░█ █▀
  █▀▀ ░█░ █░▀█ █▄█ ░█░ █▀█ █▄█ █▀▄ █▄█ ▄█


      1. Play
      2. Instructions
      3. Map List
      4. Credits
      5. Game Log
      6. Exit
        
====================================================================================================''')
        
        # Receives input
        player_input = input("Select by typing the number: ")
        while ((player_input != "1") and (player_input != "2") and (player_input != "3") and (player_input != "4") and (player_input != "5") and (player_input != "6")):
          player_input = input("Please input a valid number: ")
        player_input = int(player_input)
        
        # From 1-5
        if player_input == 1: Play()
        elif player_input == 2: InstructionPage()
        elif player_input == 3: MapListPage()
        elif player_input == 4: CreditPage()
        elif player_input == 5: GameLogPage()

        # Exit the game
        elif player_input == 6:
          print("====================================================================================================")
          text = "THANK YOU FOR PLAYING "
          for i in range(len(text)):
            print(text[:-(len(text))+i], end = "\r")
            time.sleep(0.05)
          time.sleep(3)
          for i in range(1000):
            print("\n")
            time.sleep(0.001)
          global exit_game
          exit_game = True
          exit()


    # Start loading screen
    def Load():

      for i in range(100):
        print("\n\n\n\n\n\n\n\n\n\n")

      print('''
====================================================================================================

  ▄█ █░█ ▀█ ▄▄ ▀█   █▀█ █▀█ █▀▀ █▀ █▀▀ █▄░█ ▀█▀ █▀
  ░█ █▀█ █▄ ░░ █▄   █▀▀ █▀▄ ██▄ ▄█ ██▄ █░▀█ ░█░ ▄█
        ''')

      for i in range(100):
        print("Loading game:", i+1, "%", end = "\r")
        time.sleep(0.01)

      print('''

====================================================================================================



                   ..................................................
                   ..................................................
                   ...................(///////////*..................
                   .. #(*#............*///////////#............#*((..
                   ...../(%##(/////#/*///////////////&/////(##%(*....
                   .........#%&&&&&&@@/////////////@@&&&&&&%#........
                   .................@@ %#&@@@@@@@& @@................
                   ...................@@@@@@@@@@@@@..................
                   .........(/@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@........
                   .....#@,.((& %#@@@@#@@@#@@@%@@@@@@@@&&,.&&/#@ ....
                   .....#@#@@@@%@%@@@&&@@@@@@@@@&@@@@@@@@/@@@@@@ ....
                   .....,((&@&&%@&@@@@@@@%@@@@#@@@@@@@@@&&@@&((,.....
                   .......&&&%@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@&&......
                   ..........****/..*/&&@&@&@@@@@&@/*,,*****/........
                   ....................%@@@@&&@@@@&..................
                   ...................# ,&@@@@@@/ ...................
                   ..................% *@&@@@@@#. %..................
                   ..................* .(@@@@@&@%, ..................
                   .................% ,#@@@@@@@%* #..................
                   ................., ./&@@@@@@@&(. #................


  ██████╗░██╗░░░██╗███╗░░██╗░█████╗░████████╗░█████╗░██╗░░░██╗██████╗░██╗░░░██╗░██████╗
  ██╔══██╗╚██╗░██╔╝████╗░██║██╔══██╗╚══██╔══╝██╔══██╗██║░░░██║██╔══██╗██║░░░██║██╔════╝
  ██████╔╝░╚████╔╝░██╔██╗██║██║░░██║░░░██║░░░███████║██║░░░██║██████╔╝██║░░░██║╚█████╗░
  ██╔═══╝░░░╚██╔╝░░██║╚████║██║░░██║░░░██║░░░██╔══██║██║░░░██║██╔══██╗██║░░░██║░╚═══██╗
  ██║░░░░░░░░██║░░░██║░╚███║╚█████╔╝░░░██║░░░██║░░██║╚██████╔╝██║░░██║╚██████╔╝██████╔╝
  ╚═╝░░░░░░░░╚═╝░░░╚═╝░░╚══╝░╚════╝░░░░╚═╝░░░╚═╝░░╚═╝░╚═════╝░╚═╝░░╚═╝░╚═════╝░╚═════╝░



====================================================================================================
        ''')

      time.sleep(3)
      for i in range(100):
        print("\n\n\n\n\n\n\n\n\n\n")
        time.sleep(0.01)

      Main()


    # Make sure if the game ran into error, it doesn't go back to first loading page again
    if encountered_error: Main()
    else: Load()



  ####################################################################################################
  ####################################################################################################



  # If there's an error
  except:

    # Excluding when the user chooses to exit the game on the home screen
    if exit_game:
      exit()
    
    else:
      
      for i in range(100):
          print("\n\n\n\n\n\n\n\n\n\n")
      
      print('''====================================================================================================

    █▀█ █▀█ █▀█ █▀ █
    █▄█ █▄█ █▀▀ ▄█ ▄


    The game encountered an unexpected error. We apologize for the inconvenience.
      
====================================================================================================''')
      
      input("Click \"Enter\" to return: ")
      encountered_error = True



####################################################################################################
####################################################################################################



# NICHOLAS WILSON KURNIAWAN
# CHENG SUM
# LI WAN YAU
# QIAO LECHONG

